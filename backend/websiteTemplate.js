/**
 * Generates a properly structured HTML template with Tailwind CSS
 * @param {Object} options - Template options
 * @param {String} content - Main content HTML
 * @returns {String} Complete HTML template
 */
function generateTemplate(options, content) {
  const { colors, title, meta } = options;
  
  // Convert Tailwind class strings to actual color values
  const colorValues = {
    primary: colors.primary ? '#70543e' : '#70543e', // Default to coffee dark if missing
    secondary: colors.secondary ? '#a38262' : '#a38262',
    accent: colors.accent ? '#e6d8c9' : '#e6d8c9',
    background: colors.background ? '#f7f3ed' : '#f7f3ed',
    text: colors.text ? '#3d2c22' : '#3d2c22',
  };

  return `<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Generated by Brix.AI -->
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${title || 'Website Generated by Brix.AI'}</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            primary: "${colorValues.primary}",
                            secondary: "${colorValues.secondary}",
                            accent: "${colorValues.accent}",
                            background: "${colorValues.background}",
                            text: "${colorValues.text}",
                        },
                        animation: {
                            'float': 'float 3s ease-in-out infinite',
                            'slide-up': 'slideUp 0.5s ease-out',
                            'fade-in': 'fadeIn 0.5s ease-out',
                            'scale-in': 'scaleIn 0.5s ease-out'
                        },
                        keyframes: {
                            float: {
                                '0%, 100%': { transform: 'translateY(0)' },
                                '50%': { transform: 'translateY(-20px)' }
                            },
                            slideUp: {
                                '0%': { transform: 'translateY(100px)', opacity: '0' },
                                '100%': { transform: 'translateY(0)', opacity: '1' }
                            },
                            fadeIn: {
                                '0%': { opacity: '0' },
                                '100%': { opacity: '1' }
                            },
                            scaleIn: {
                                '0%': { transform: 'scale(0.9)', opacity: '0' },
                                '100%': { transform: 'scale(1)', opacity: '1' }
                            }
                        }
                    }
                }
            }
        </script>
        <style>
            html {
                scroll-behavior: smooth;
            }
            
            /* Add additional base styles here */
            body {
                color: ${colorValues.text};
                background-color: ${colorValues.background};
            }
        </style>
    </head>
    <body class="font-sans antialiased">
        ${content}
        
        <script>
            // Initialize GSAP
            gsap.registerPlugin(ScrollTrigger);

            // Animate elements on page load
            window.addEventListener('load', () => {
                // Hero section animation
                gsap.from('[data-animate="hero"]', {
                    duration: 1,
                    y: 100,
                    opacity: 0,
                    ease: "power4.out"
                });

                // Animate sections on scroll
                gsap.utils.toArray('[data-animate="section"]').forEach((section, i) => {
                    gsap.from(section, {
                        scrollTrigger: {
                            trigger: section,
                            start: "top 80%",
                            toggleActions: "play none none reverse"
                        },
                        y: 60,
                        opacity: 0,
                        duration: 1,
                        ease: "power2.out"
                    });
                });

                // Animate cards with stagger
                gsap.utils.toArray('[data-animate="card"]').forEach((cards) => {
                    gsap.from(cards, {
                        scrollTrigger: {
                            trigger: cards,
                            start: "top 85%"
                        },
                        y: 40,
                        opacity: 0,
                        duration: 0.6,
                        stagger: 0.2,
                        ease: "power2.out"
                    });
                });

                // Parallax effect for background elements
                gsap.utils.toArray('[data-parallax]').forEach((element) => {
                    gsap.to(element, {
                        scrollTrigger: {
                            trigger: element,
                            scrub: true
                        },
                        y: (i, target) => -100 * target.dataset.speed,
                        ease: "none"
                    });
                });
            });

            // Smooth scroll
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            // Mobile menu with animation
            const mobileMenu = document.getElementById('mobile-menu');
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            if (mobileMenuButton && mobileMenu) {
                mobileMenuButton.addEventListener('click', () => {
                    mobileMenu.classList.toggle('hidden');
                    gsap.from('#mobile-menu > *', {
                        y: -20,
                        opacity: 0,
                        duration: 0.3,
                        stagger: 0.1,
                        ease: "power2.out"
                    });
                });
            }

            // Add hover animations for interactive elements
            const addHoverAnimation = (elements, scale = 1.05) => {
                elements.forEach(el => {
                    el.addEventListener('mouseenter', () => {
                        gsap.to(el, { scale: scale, duration: 0.3, ease: "power2.out" });
                    });
                    el.addEventListener('mouseleave', () => {
                        gsap.to(el, { scale: 1, duration: 0.3, ease: "power2.out" });
                    });
                });
            };

            // Apply hover animations to buttons and cards
            addHoverAnimation(document.querySelectorAll('.hover-animation'), 1.05);
        </script>
    </body>
</html>`;
}

module.exports = { generateTemplate };