require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');

const app = express();
const port = 3001;

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

app.use(cors());
app.use(express.json());

// Color scheme definitions
const colorSchemes = {
  modern: {
    primary: '#2D3436',
    secondary: '#636E72',
    accent: '#0984E3',
    background: '#FFFFFF',
    text: '#2D3436'
  },
  minimal: {
    primary: '#000000',
    secondary: '#333333',
    accent: '#666666',
    background: '#FFFFFF',
    text: '#000000'
  },
  warm: {
    primary: '#C0392B',
    secondary: '#E74C3C',
    accent: '#D35400',
    background: '#FFF5F5',
    text: '#2C3E50'
  },
  // Add more color schemes as needed
};

// Website type templates and content structure
const websiteTemplates = {
  business: {
    sections: ['hero', 'services', 'about', 'testimonials', 'contact'],
    contentTypes: ['company description', 'service offerings', 'team information', 'client reviews']
  },
  portfolio: {
    sections: ['intro', 'projects', 'skills', 'experience', 'contact'],
    contentTypes: ['personal bio', 'project showcases', 'technical skills', 'work history']
  },
  ecommerce: {
    sections: ['featured', 'products', 'categories', 'about', 'contact'],
    contentTypes: ['product descriptions', 'pricing information', 'category descriptions']
  }
  // Add more templates as needed
};

app.post('/generate', async (req, res) => {
  try {
    const { 
      prompt,
      websiteType = 'business',
      colorScheme = 'modern',
      style = 'minimal',
      brandTone = 'professional'
    } = req.body;

    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Generate content first
    const contentPrompt = `
    Generate website content for a ${websiteType} website with the following details:
    "${prompt}"
    
    Requirements:
    1. Tone of voice: ${brandTone}
    2. Include all necessary sections for a ${websiteType} website
    3. Generate real, contextual content (not lorem ipsum)
    4. Include SEO-friendly headings and descriptions
    5. Maintain consistent brand voice throughout
    6. Generate appropriate calls-to-action
    7. Include meta descriptions and title tags
    `;

    const contentResult = await model.generateContent(contentPrompt);
    const contentResponse = await contentResult.response;
    const generatedContent = JSON.parse(contentResponse.text());

    // Generate the website with the content
    const websitePrompt = `
    Generate a complete, modern HTML , CSS and javascript website using this content: ${JSON.stringify(generatedContent)}
    
    Technical Requirements:
    1. Use semantic HTML5 elements (header, nav, main, section, footer)
    2. Implement responsive design with mobile-first approach
    3. Include CSS custom properties for the color scheme: ${JSON.stringify(colorSchemes[colorScheme])}
    4. Use modern CSS features (Flexbox, Grid, clamp(), etc.)
    5. Optimize for performance (lazy loading, efficient selectors)
    6. Include accessibility features (ARIA labels, semantic structure)
    7. Add micro-interactions and smooth transitions
    8. Implement proper meta tags for SEO
    9. Use srcset for responsive images
    10. Include structured data markup where appropriate
    
    Design Requirements:
    1. Follow ${style} design principles
    2. Use whitespace effectively
    3. Maintain visual hierarchy
    4. Ensure readable typography (minimum 16px base font size)
    5. Use consistent spacing throughout
    6. Include hover and focus states
    7. Implement smooth scrolling
    8. Use subtle animations for better UX
    
    Additional Features:
    1. Add a cookie consent banner
    2. Include a newsletter signup form
    3. Add social media integration
    4. Implement a contact form
    5. Add Google Analytics placeholder
    6. Include favicon placeholder
    
    Performance Optimizations:
    1. Minify CSS
    2. Use system font stack
    3. Implement critical CSS
    4. Add appropriate caching headers
    `;

    const result = await model.generateContent(websitePrompt);
    const response = await result.response;
    const generatedCode = response.text();

    // Post-process the generated code
    const processedCode = generatedCode
      .replace(/placehold\.co/g, 'picsum.photos') // Better placeholder images
      .replace(/<head>/, `<head>\n  <!-- Generated by Brix.AI -->`);

    res.json({ 
      code: processedCode,
      content: generatedContent,
      metadata: {
        type: websiteType,
        colorScheme,
        style,
        brandTone,
        generated: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ 
      error: 'Failed to generate website', 
      details: error.message 
    });
  }
});

// Get available color schemes
app.get('/color-schemes', (req, res) => {
  res.json(colorSchemes);
});

// Get available website templates
app.get('/templates', (req, res) => {
  res.json(websiteTemplates);
});

// Test endpoint
app.get('/test', (req, res) => {
  res.json({ 
    message: 'Brix.AI Backend is running!',
    version: '2.0.0',
    features: [
      'Dynamic content generation',
      'Multiple color schemes',
      'Website templates',
      'SEO optimization',
      'Responsive design'
    ]
  });
});

app.listen(port, () => {
  console.log(`Brix.AI Server running at http://localhost:${port}`);
  console.log(`API Documentation available at http://localhost:${port}/docs`);
});